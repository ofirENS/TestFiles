function outStruct = OptimizeEncounterDistances()
% assuming encounter frequencies follow a*d^(-1.5) model 
% and given the observed encounter probabilities, find the distances which
% optimize the error between the model and observed data 
% close all
observedProb       = (1:64).^(-1.5);
observedProb       =(observedProb+fliplr(observedProb))/2;
observedProb(1:32) = (observedProb(1:32)+fliplr(observedProb(1:32)))/2; 
observedProb(33:64)= observedProb(1:32); 
observedProb(41:48) = (observedProb(41:48)+fliplr(observedProb(41:48)))/2; 
observedProb(41:64)= observedProb(1:32); 
observedProb       = observedProb/sum(observedProb);
setappdata(0,'obs', observedProb);
numObs = numel(observedProb);% number of observations 

% MyFun  = @(x) sum(((x(1:end).^(-beta)/sum(x(1:end).^(-beta)))-(observedProb)).^2);
MyFun = @(x) sum(x(1:end));
beta  = 1.5;
[vals,outStruct.fVal,outStruct.exitflag,outStruct.output] = fmincon(MyFun,(1:numObs),...
                eye(numObs),...
                1:numObs,...
                [],...
                [],...
                ones(numObs,1),...
                1:numObs,...
                @MyCon,...
                optimoptions('fmincon','Algorithm','sqp',...
                'TolFun',1e-8,...
                'TolX',1e-8,...
                'TolCon',1e-7,...
                'MaxIter',1e7,...
                'MaxFunEvals',5e4));
% [vals,outStruct.fVal,outStruct.exitflag,outStruct.output] = ga(MyFun,numObs+1,...
%                 eye(numObs+1),...
%                 [0;ones(numObs,1)],...
%                 [],...
%                 [],...
%                 [-1;zeros(numObs,1)],...
%                 [0;numObs*ones(numObs,1)],...
%                 [],...
%                 [2:numObs+1],...
%                 gaoptimset('TolCon',1e-10,'TolFun',1e-10,'Generations',1e4,'HybridFcn',@fmincon));
                           
outStruct.optimDists = vals(1:end);
outStruct.exp        = beta;%+vals(1);
figure, plot(1:numObs,outStruct.optimDists)
hold on, plot(1:numObs,smooth((outStruct.optimDists),10),'r')
figure, plot(1:numObs,(1/(sum(outStruct.optimDists.^(-1.5))))*outStruct.optimDists.^(-1.5),'r'),
hold on 
plot(1:numObs,observedProb)
end

function [c,ceq]=MyCon(x)
beta = 1.5;
observedProb = getappdata(0,'obs');
 ceq = sum(((x(1:end).^(-beta)/sum(x(1:end).^(-beta)))-(observedProb)).^2);
 c   = sum(((x(1:end).^(-beta)/sum(x(1:end).^(-beta)))-(observedProb)).^2);

end
